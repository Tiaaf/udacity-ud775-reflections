What happens when you initialize a repository? Why do you need to do it?

     A directory '.git' is created. If I don't do it, any git command will not recognize the current directory as a git repo since it won't contain the metadata needed.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

     The staging area stores only the files which will be included in the next commit. The repository is not aware of these changes yet nor it is aware of all the changes in the working directory, and the working directory may have more differences that might be added in an upcoming commit.
     It offers the possibility to parse the modifications of a repository in small logical changes, so that each commit will retain more sense, more meaning.

How can you use the staging area to make sure you have one commit per logical
change?

        Well, I could try to add files regularly, and whenever I would start to work on a different logical change, I would commit if it concerns the same files than the ones staged. If not, I could still work with unstaged files until I want to work on staged files or start to work on a third logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

        Branches could be helpful in keeping my history organized by allowing a separation of history into several different branches in order to separate the development of different features. Also, if any of those new features would be unused in the end for a reason or another, erasing the branch would not impact the others history branches, thus those would be clean and unarmed.

How do the diagrams help you visualize the branch structure?

    The diagram structure correspond to the branch structure and is something we're more used to. So understanding the diagram structure is both easier and allow us to understand the branch structure (and so visualize it).

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    The result is a mix of the two branches, a logical fusion of their common parts plus their modifications (adds/deletes).
    Such a representation in the diagram is due to the fact that they'll then share a common history, with the resulting commit pointing at both the merged commits.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
